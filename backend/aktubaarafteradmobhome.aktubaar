package com.example.aktubaar

import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.net.ConnectivityManager
import android.net.NetworkCapabilities
import android.net.Uri
import android.util.Log
import android.view.View
import android.webkit.WebChromeClient
import android.webkit.WebResourceError
import android.webkit.WebResourceRequest
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.compose.BackHandler
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.FileProvider
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import androidx.navigation.NavHostController
import coil.compose.AsyncImage
import com.google.android.gms.ads.AdListener
import com.google.android.gms.ads.AdRequest
import com.google.android.gms.ads.AdSize
import com.google.android.gms.ads.AdView
import com.google.android.gms.ads.LoadAdError
import com.google.android.ump.ConsentInformation
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.util.concurrent.TimeUnit

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navController: NavHostController,
    userName: String,
    email: String,
    drawerState1: DrawerState,
    scope1: CoroutineScope,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()
    var isAdLoading by remember { mutableStateOf(true) }
    var adLoadFailed by remember { mutableStateOf(false) }

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Row(verticalAlignment = Alignment.CenterVertically) {
                            Text(
                                text = "AktuBaar",
                                fontSize = 26.sp,
                                fontWeight = FontWeight.ExtraBold,
                                color = MaterialTheme.colorScheme.onPrimary
                            )
                            Spacer(modifier = Modifier.width(8.dp))
                            Icon(
                                imageVector = Icons.Default.School,
                                contentDescription = null,
                                tint = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f),
                                modifier = Modifier.size(28.dp)
                            )
                        }
                    },
                    navigationIcon = {
                        IconButton(
                            onClick = { scope.launch { drawerState1.open() } },
                            modifier = Modifier
                                .background(MaterialTheme.colorScheme.primaryContainer, CircleShape)
                                .padding(6.dp)
                        ) {
                            Icon(
                                imageVector = Icons.Default.Menu,
                                contentDescription = "Menu",
                                tint = MaterialTheme.colorScheme.onPrimaryContainer,
                                modifier = Modifier.size(28.dp)
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    ),
                    modifier = Modifier.shadow(elevation = 8.dp)
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) },
            containerColor = MaterialTheme.colorScheme.background
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 24.dp),
                verticalArrangement = Arrangement.spacedBy(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                val welcomeAlpha by animateFloatAsState(
                    targetValue = 1f,
                    animationSpec = tween(durationMillis = 800, delayMillis = 200),
                    label = "welcomeFadeIn"
                )
                Text(
                    text = "Welcome, $userName!",
                    fontSize = 30.sp,
                    fontWeight = FontWeight.ExtraBold,
                    color = MaterialTheme.colorScheme.onBackground,
                    modifier = Modifier.alpha(welcomeAlpha)
                )

                val buttonScale by animateFloatAsState(
                    targetValue = 1f,
                    animationSpec = tween(durationMillis = 600),
                    label = "buttonScale"
                )
                Button(
                    onClick = {
                        scope.launch {
                            navController.safeNavigate("syllabus", snackbarHostState, scope)
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp)
                        .scale(buttonScale),
                    shape = RoundedCornerShape(16.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary,
                        contentColor = MaterialTheme.colorScheme.onPrimary
                    ),
                    elevation = ButtonDefaults.buttonElevation(defaultElevation = 6.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.Center
                    ) {
                        Icon(
                            imageVector = Icons.Default.Book,
                            contentDescription = "Syllabus",
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Syllabus",
                            fontSize = 18.sp,
                            fontWeight = FontWeight.SemiBold
                        )
                    }
                }

                BranchGrid(navController, snackbarHostState, scope)

                // Banner Ad at the bottom
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .wrapContentHeight(),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    AnimatedVisibility(visible = isAdLoading) {
                        CircularProgressIndicator(
                            modifier = Modifier
                                .size(30.dp)
                                .padding(8.dp),
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    AnimatedVisibility(visible = !isAdLoading && adLoadFailed) {
                        Text(
                            text = "Ad failed to load",
                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                            fontSize = 12.sp,
                            modifier = Modifier.padding(8.dp)
                        )
                    }

                    AnimatedVisibility(visible = !isAdLoading && !adLoadFailed) {
                        AndroidView(
                            modifier = Modifier
                                .fillMaxWidth()
                                .wrapContentHeight(),
                            factory = { context ->
                                AdView(context).apply {
                                    setAdSize(AdSize.BANNER)
                                    adUnitId = context.getString(R.string.banner_ad_unit_id)
                                    adListener = object : AdListener() {
                                        override fun onAdLoaded() {
                                            isAdLoading = false
                                            adLoadFailed = false
                                            Log.d("HomeScreen", "Ad loaded successfully")
                                        }

                                        override fun onAdFailedToLoad(error: LoadAdError) {
                                            isAdLoading = false
                                            adLoadFailed = true
                                            Log.e("HomeScreen", "Ad failed to load: ${error.message}")
                                            scope.launch {
                                                snackbarHostState.showSnackbar("Ad failed to load: ${error.message}")
                                            }
                                        }
                                    }
                                    val adRequest = AdRequest.Builder().apply {
                                        if (consentInformation.consentStatus != ConsentInformation.ConsentStatus.OBTAINED) {
                                            val extras = android.os.Bundle()
                                            extras.putString("npa", "1") // Non-personalized ads
                                            addNetworkExtrasBundle(
                                                com.google.ads.mediation.admob.AdMobAdapter::class.java,
                                                extras
                                            )
                                        }
                                    }.build()
                                    loadAd(adRequest)
                                }
                            }
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun DrawerContent(
    navController: NavController,
    drawerState: DrawerState,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    snackbarHostState: SnackbarHostState
) {
    val scope = rememberCoroutineScope()
    val context = LocalContext.current
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    Column(
        modifier = Modifier
            .fillMaxHeight()
            .width(280.dp)
            .background(MaterialTheme.colorScheme.surface)
            .padding(16.dp)
    ) {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 24.dp),
            shape = RoundedCornerShape(16.dp),
            colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.primary),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        .background(MaterialTheme.colorScheme.secondary, CircleShape)
                ) {
                    AsyncImage(
                        model = "https://img.freepik.com/premium-vector/avatar-profile-icon-flat-style-male-user-profile-vector-illustration-isolated-background-man-profile-sign-business-concept_157943-38764.jpg",
                        contentDescription = "Profile Image",
                        modifier = Modifier
                            .size(70.dp)
                            .align(Alignment.Center)
                            .clip(CircleShape),
                        onError = { Log.e("AktuBaar", "Failed to load profile image: ${it.result.throwable?.message}") }
                    )
                }
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = userName.takeIf { it.isNotBlank() } ?: "User",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onPrimary
                )
                Text(
                    text = email.takeIf { it.isNotBlank() } ?: "email@example.com",
                    fontSize = 14.sp,
                    color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.7f)
                )
            }
        }

        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {
            DrawerItem("Home", Icons.Default.Home, navController, "home", drawerState, snackbarHostState, scope)
            DrawerItem("About", Icons.Default.Info, navController, "about", drawerState, snackbarHostState, scope)
            DrawerItem("Settings", Icons.Default.Settings, navController, "settings", drawerState, snackbarHostState, scope)
            DrawerItem("Feedback", Icons.Default.Chat, navController, "feedback", drawerState, snackbarHostState, scope)
            DrawerItem("Report an Issue", Icons.Default.BugReport, navController, "report_issue", drawerState, snackbarHostState, scope)

            Button(
                onClick = {
                    scope.launch { navController.safeNavigate("profile", snackbarHostState, scope) }
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp),
                shape = RoundedCornerShape(12.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary
                )
            ) {
                Text("Edit Profile", fontSize = 16.sp, fontWeight = FontWeight.Medium)
            }
        }
        Spacer(modifier = Modifier.weight(1f))
        TextButton(
            onClick = {
                scope.launch {
                    try {
                        with(context.getSharedPreferences("AktuBaarPrefs", Context.MODE_PRIVATE).edit()) {
                            remove("userName")
                            remove("email")
                            apply()
                        }
                        drawerState.close()
                        navController.safeNavigate("home", snackbarHostState, scope)
                    } catch (e: Exception) {
                        snackbarHostState.showSnackbar("Logout failed, please try again")
                        Log.e("AktuBaar", "Logout error: ${e.message}")
                    }
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            colors = ButtonDefaults.textButtonColors(contentColor = MaterialTheme.colorScheme.error)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Icon(Icons.Default.ExitToApp, contentDescription = "Logout", modifier = Modifier.size(20.dp))
                Spacer(modifier = Modifier.width(8.dp))
                Text("Logout", fontSize = 14.sp, fontWeight = FontWeight.Medium)
            }
        }
    }
}

@Composable
fun DrawerItem(
    text: String,
    icon: ImageVector,
    navController: NavController,
    route: String,
    drawerState: DrawerState,
    snackbarHostState: SnackbarHostState,
    scope: CoroutineScope
) {
    TextButton(
        onClick = {
            scope.launch {
                drawerState.close()
                navController.safeNavigate(route, snackbarHostState, scope)
            }
        },
        modifier = Modifier
            .fillMaxWidth()
            .height(48.dp)
            .padding(start = 8.dp, end = 8.dp)
            .background(MaterialTheme.colorScheme.surfaceVariant, RoundedCornerShape(12.dp)),
        colors = ButtonDefaults.textButtonColors(contentColor = MaterialTheme.colorScheme.onSurface)
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Icon(imageVector = icon, contentDescription = text, modifier = Modifier.size(24.dp))
            Spacer(modifier = Modifier.width(16.dp))
            Text(text, fontSize = 16.sp, fontWeight = FontWeight.Medium)
        }
    }
}

@Composable
fun BranchGrid(navController: NavController, snackbarHostState: SnackbarHostState, scope: CoroutineScope) {
    val branches = listOf("CSE", "Textile", "Electronics", "Mechanical", "Electrical", "AIML")
    val vibrantColors = listOf(
        MaterialTheme.colorScheme.primary,
        MaterialTheme.colorScheme.secondary,
        MaterialTheme.colorScheme.tertiary,
        MaterialTheme.colorScheme.primaryContainer,
        MaterialTheme.colorScheme.secondaryContainer,
        MaterialTheme.colorScheme.tertiaryContainer
    )

    LazyVerticalGrid(
        columns = GridCells.Fixed(2),
        modifier = Modifier
            .fillMaxWidth()
            .padding(top = 8.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(branches) { branch ->
            val index = branches.indexOf(branch)
            val alpha by animateFloatAsState(
                targetValue = 1f,
                animationSpec = tween(durationMillis = 600, delayMillis = index * 100),
                label = "branchFadeIn"
            )
            Card(
                modifier = Modifier
                    .height(120.dp)
                    .alpha(alpha)
                    .clickable {
                        scope.launch {
                            navController.safeNavigate("semesters/$branch", snackbarHostState, scope)
                        }
                    },
                colors = CardDefaults.cardColors(
                    containerColor = vibrantColors[index % vibrantColors.size]
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                shape = RoundedCornerShape(16.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = branch,
                        fontSize = 18.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onPrimary,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(8.dp)
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SemesterScreen(
    branch: String,
    navController: NavController,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "$branch - Semesters",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Choose a Semester",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground
                )
                SemesterGrid(branch = branch, navController = navController, snackbarHostState = snackbarHostState, scope = scope)
            }
        }
    }
}

@Composable
fun SemesterGrid(branch: String, navController: NavController, snackbarHostState: SnackbarHostState, scope: CoroutineScope) {
    val semesters = listOf(1, 2, 3, 4, 5, 6, 7, 8)
    LazyVerticalGrid(
        columns = GridCells.Fixed(2),
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(semesters) { semester ->
            Button(
                onClick = {
                    scope.launch {
                        navController.safeNavigate("subjects/$branch/$semester", snackbarHostState, scope)
                    }
                },
                modifier = Modifier.height(100.dp),
                shape = RoundedCornerShape(16.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary
                )
            ) {
                Text(
                    text = "Semester $semester",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SubjectScreen(
    branch: String,
    semester: Int,
    navController: NavController,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    var subjects by remember { mutableStateOf<List<String>>(emptyList()) }
    var isLoading by remember { mutableStateOf(true) }
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()
    var isAdLoading by remember { mutableStateOf(true) }
    var adLoadFailed by remember { mutableStateOf(false) }

    // Fetch subjects from Firebase
    LaunchedEffect(branch, semester) {
        val database = FirebaseDatabase.getInstance().getReference("branchSemesterSubjects/$branch/$semester")
        database.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val fetchedSubjects = mutableListOf<String>()
                for (child in snapshot.children) {
                    val subject = child.getValue(String::class.java)
                    subject?.let { fetchedSubjects.add(it) }
                }
                subjects = fetchedSubjects
                isLoading = false
            }

            override fun onCancelled(error: DatabaseError) {
                isLoading = false
                scope.launch {
                    snackbarHostState.showSnackbar("Failed to load subjects: ${error.message}")
                }
                Log.e("SubjectScreen", "Firebase error: ${error.message}")
            }
        })
    }

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "$branch - Semester $semester - Subjects",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
            ) {
                // Loading Indicator Centered
                AnimatedVisibility(
                    visible = isLoading,
                    modifier = Modifier.align(Alignment.Center)
                ) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(50.dp),
                        color = MaterialTheme.colorScheme.primary
                    )
                }

                // Empty State
                AnimatedVisibility(
                    visible = !isLoading && subjects.isEmpty(),
                    modifier = Modifier.align(Alignment.Center)
                ) {
                    Text(
                        text = "No subjects available for this semester.",
                        color = MaterialTheme.colorScheme.onSurface,
                        fontSize = 16.sp,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(horizontal = 16.dp)
                    )
                }

                // Subject List and Banner Ad
                AnimatedVisibility(
                    visible = !isLoading && subjects.isNotEmpty(),
                    modifier = Modifier.fillMaxSize()
                ) {
                    Column(
                        modifier = Modifier.fillMaxSize(),
                        verticalArrangement = Arrangement.SpaceBetween
                    ) {
                        // Subject List
                        LazyColumn(
                            modifier = Modifier
                                .weight(1f)
                                .padding(horizontal = 16.dp, vertical = 16.dp),
                            verticalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            items(subjects) { subject ->
                                var hasNotes by remember { mutableStateOf(false) }
                                val database = FirebaseDatabase.getInstance().getReference("branchSemesterSubjectNotes/$branch/$semester/$subject")

                                // Check if notes exist for the subject
                                LaunchedEffect(subject) {
                                    database.get().addOnSuccessListener { snapshot ->
                                        hasNotes = snapshot.exists()
                                    }.addOnFailureListener {
                                        scope.launch {
                                            snackbarHostState.showSnackbar("Error checking notes: ${it.message}")
                                        }
                                        Log.e("SubjectScreen", "Error checking notes: ${it.message}")
                                    }
                                }

                                Card(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(60.dp)
                                        .clickable {
                                            if (hasNotes) {
                                                scope.launch {
                                                    navController.safeNavigate("units/$branch/$semester/$subject", snackbarHostState, scope)
                                                }
                                            } else {
                                                scope.launch {
                                                    snackbarHostState.showSnackbar("Notes for $subject are coming soon!")
                                                }
                                            }
                                        },
                                    shape = RoundedCornerShape(12.dp),
                                    colors = CardDefaults.cardColors(
                                        containerColor = if (hasNotes) MaterialTheme.colorScheme.primary
                                        else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.1f)
                                    )
                                ) {
                                    Row(
                                        modifier = Modifier
                                            .fillMaxSize()
                                            .padding(horizontal = 16.dp),
                                        verticalAlignment = Alignment.CenterVertically,
                                        horizontalArrangement = Arrangement.SpaceBetween
                                    ) {
                                        Text(
                                            text = subject,
                                            fontSize = 16.sp,
                                            fontWeight = FontWeight.Medium,
                                            color = if (hasNotes) MaterialTheme.colorScheme.onPrimary
                                            else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                                        )
                                        if (!hasNotes) {
                                            Text(
                                                text = "Coming Soon",
                                                fontSize = 12.sp,
                                                fontWeight = FontWeight.Light,
                                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                                            )
                                        }
                                    }
                                }
                            }
                        }

                        // Banner Ad at the bottom
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .wrapContentHeight(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            AnimatedVisibility(visible = isAdLoading) {
                                CircularProgressIndicator(
                                    modifier = Modifier
                                        .size(30.dp)
                                        .padding(8.dp),
                                    color = MaterialTheme.colorScheme.primary
                                )
                            }

                            AnimatedVisibility(visible = !isAdLoading && adLoadFailed) {
                                Text(
                                    text = "Ad failed to load",
                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                                    fontSize = 12.sp,
                                    modifier = Modifier.padding(8.dp)
                                )
                            }

                            AnimatedVisibility(visible = !isAdLoading && !adLoadFailed) {
                                AndroidView(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .wrapContentHeight(),
                                    factory = { context ->
                                        AdView(context).apply {
                                            setAdSize(AdSize.BANNER)
                                            adUnitId = context.getString(R.string.banner_ad_unit_id)
                                            adListener = object : AdListener() {
                                                override fun onAdLoaded() {
                                                    isAdLoading = false
                                                    adLoadFailed = false
                                                    Log.d("SubjectScreen", "Ad loaded successfully")
                                                }

                                                override fun onAdFailedToLoad(error: LoadAdError) {
                                                    isAdLoading = false
                                                    adLoadFailed = true
                                                    Log.e("SubjectScreen", "Ad failed to load: ${error.message}")
                                                    scope.launch {
                                                        snackbarHostState.showSnackbar("Ad failed to load: ${error.message}")
                                                    }
                                                }
                                            }
                                            val adRequest = AdRequest.Builder().apply {
                                                if (consentInformation.consentStatus != ConsentInformation.ConsentStatus.OBTAINED) {
                                                    val extras = android.os.Bundle()
                                                    extras.putString("npa", "1") // Non-personalized ads
                                                    addNetworkExtrasBundle(
                                                        com.google.ads.mediation.admob.AdMobAdapter::class.java,
                                                        extras
                                                    )
                                                }
                                            }.build()
                                            loadAd(adRequest)
                                        }
                                    }
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UnitScreen(
    branch: String,
    semester: Int,
    subject: String,
    navController: NavController,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    var searchQuery by remember { mutableStateOf("") }
    var notes by remember { mutableStateOf<List<PdfNote>>(emptyList()) }
    var isLoading by remember { mutableStateOf(true) }
    val context = LocalContext.current
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    // Fetch notes from Firebase
    LaunchedEffect(branch, semester, subject) {
        val database = FirebaseDatabase.getInstance().getReference("branchSemesterSubjectNotes/$branch/$semester/$subject")
        database.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val fetchedNotes = mutableListOf<PdfNote>()
                for (child in snapshot.children) {
                    val note = child.getValue(PdfNote::class.java)
                    note?.let { fetchedNotes.add(it) }
                }
                notes = fetchedNotes
                isLoading = false
            }

            override fun onCancelled(error: DatabaseError) {
                isLoading = false
                scope.launch {
                    snackbarHostState.showSnackbar("Failed to load notes: ${error.message}")
                }
                Log.e("UnitScreen", "Firebase error: ${error.message}")
            }
        })
    }

    val filteredNotes = notes.filter { it.title.contains(searchQuery, ignoreCase = true) }

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "$branch - Sem $semester - $subject - Units",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                TextField(
                    value = searchQuery,
                    onValueChange = { searchQuery = it },
                    placeholder = { Text("Search units...", color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(
                            color = MaterialTheme.colorScheme.surface,
                            shape = RoundedCornerShape(16.dp)
                        ),
                    colors = TextFieldDefaults.colors(
                        focusedTextColor = MaterialTheme.colorScheme.onSurface,
                        unfocusedTextColor = MaterialTheme.colorScheme.onSurface,
                        cursorColor = MaterialTheme.colorScheme.primary,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent
                    ),
                    singleLine = true
                )
                if (isLoading) {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                } else if (filteredNotes.isEmpty()) {
                    Text(
                        text = "No notes available",
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    )
                } else {
                    LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                        items(filteredNotes) { note ->
                            NoteItem(note = note, snackbarHostState = snackbarHostState, scope = scope, context = context)
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuestionBankScreen(
    navController: NavHostController,
    userName: String,
    email: String,
    viewModel: MainViewModel
) {
    val branches = listOf("CSE", "Textile", "Electronics", "Mechanical", "Electrical", "AIML")
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "Question Bank",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Select a Branch",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground
                )
                LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    items(branches) { branch ->
                        Button(
                            onClick = {
                                scope.launch {
                                    navController.safeNavigate("qb_semesters/$branch", snackbarHostState, scope)
                                }
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(60.dp),
                            shape = RoundedCornerShape(12.dp),
                            colors = ButtonDefaults.buttonColors(
                                containerColor = MaterialTheme.colorScheme.primary,
                                contentColor = MaterialTheme.colorScheme.onPrimary
                            )
                        ) {
                            Text(
                                text = branch,
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Medium
                            )
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuestionBankSemesterScreen(
    branch: String,
    navController: NavController,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "$branch - Question Bank Semesters",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Choose a Semester",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground
                )
                SemesterGridForQuestionBank(branch = branch, navController = navController, snackbarHostState = snackbarHostState, scope = scope)
            }
        }
    }
}

@Composable
fun SemesterGridForQuestionBank(branch: String, navController: NavController, snackbarHostState: SnackbarHostState, scope: CoroutineScope) {
    val semesters = listOf(1, 2, 3, 4, 5, 6, 7, 8)
    LazyVerticalGrid(
        columns = GridCells.Fixed(2),
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(16.dp),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        items(semesters) { semester ->
            Button(
                onClick = {
                    scope.launch {
                        navController.safeNavigate("qb_units/$branch/$semester", snackbarHostState, scope)
                    }
                },
                modifier = Modifier.height(100.dp),
                shape = RoundedCornerShape(16.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    contentColor = MaterialTheme.colorScheme.onPrimary
                )
            ) {
                Text(
                    text = "Semester $semester",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuestionBankUnitsScreen(
    branch: String,
    semester: Int,
    navController: NavController,
    userName: String,
    email: String,
    viewModel: MainViewModel,
    consentInformation: ConsentInformation
) {
    val scope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }
    var searchQuery by remember { mutableStateOf("") }
    var questionBanks by remember { mutableStateOf<List<PdfNote>>(emptyList()) }
    var isLoading by remember { mutableStateOf(true) }
    val context = LocalContext.current
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    // Fetch question banks from Firebase
    LaunchedEffect(branch, semester) {
        val database = FirebaseDatabase.getInstance().getReference("branchSemesterQuestionBanks/$branch/$semester")
        database.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val fetchedBanks = mutableListOf<PdfNote>()
                for (child in snapshot.children) {
                    val bank = child.getValue(PdfNote::class.java)
                    bank?.let { fetchedBanks.add(it) }
                }
                questionBanks = fetchedBanks
                isLoading = false
            }

            override fun onCancelled(error: DatabaseError) {
                isLoading = false
                scope.launch {
                    snackbarHostState.showSnackbar("Failed to load question banks: ${error.message}")
                }
                Log.e("QuestionBankUnits", "Firebase error: ${error.message}")
            }
        })
    }

    val filteredQuestionBanks = questionBanks.filter { it.title.contains(searchQuery, ignoreCase = true) }

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "$branch - Sem $semester - Question Banks",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                TextField(
                    value = searchQuery,
                    onValueChange = { searchQuery = it },
                    placeholder = { Text("Search question banks...", color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .background(
                            color = MaterialTheme.colorScheme.surface,
                            shape = RoundedCornerShape(16.dp)
                        ),
                    colors = TextFieldDefaults.colors(
                        focusedTextColor = MaterialTheme.colorScheme.onSurface,
                        unfocusedTextColor = MaterialTheme.colorScheme.onSurface,
                        cursorColor = MaterialTheme.colorScheme.primary,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent
                    ),
                    singleLine = true
                )
                if (isLoading) {
                    CircularProgressIndicator(modifier = Modifier.align(Alignment.CenterHorizontally))
                } else if (filteredQuestionBanks.isEmpty()) {
                    Text(
                        text = "No question banks available",
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier.align(Alignment.CenterHorizontally)
                    )
                } else {
                    LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                        items(filteredQuestionBanks) { note ->
                            NoteItem(note = note, snackbarHostState = snackbarHostState, scope = scope, context = context)
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun NoteItem(note: PdfNote, snackbarHostState: SnackbarHostState, scope: CoroutineScope, context: Context) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable {
                scope.launch {
                    try {
                        viewPdf(context, note.url, snackbarHostState)
                    } catch (e: ActivityNotFoundException) {
                        snackbarHostState.showSnackbar("No PDF viewer installed")
                        Log.e("AktuBaar", "No PDF viewer: ${e.message}")
                    } catch (e: SecurityException) {
                        snackbarHostState.showSnackbar("Permission denied to open PDF")
                        Log.e("AktuBaar", "Security error: ${e.message}")
                    } catch (e: Exception) {
                        snackbarHostState.showSnackbar("Failed to open PDF")
                        Log.e("AktuBaar", "PDF open error: ${e.message}")
                    }
                }
            },
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
    ) {
        Row(
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(modifier = Modifier.weight(1f)) {
                Icon(
                    imageVector = Icons.Default.PictureAsPdf,
                    contentDescription = "PDF Icon",
                    modifier = Modifier.size(40.dp),
                    tint = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Column {
                    Text(
                        text = note.title,
                        fontWeight = FontWeight.Bold,
                        fontSize = 16.sp,
                        color = MaterialTheme.colorScheme.onSurface
                    )
                    Text(
                        text = "Semester ${note.semester}",
                        fontSize = 12.sp,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                    )
                }
            }
            IconButton(
                onClick = {
                    scope.launch {
                        try {
                            if (!isNetworkAvailable(context)) {
                                snackbarHostState.showSnackbar("No internet connection")
                                return@launch
                            }
                            downloadPdf(note.url, context, snackbarHostState)
                            snackbarHostState.showSnackbar("Download started")
                        } catch (e: IOException) {
                            snackbarHostState.showSnackbar("Download failed: Network or file error")
                            Log.e("AktuBaar", "Download IOException: ${e.message}")
                        } catch (e: SecurityException) {
                            snackbarHostState.showSnackbar("Permission denied for download")
                            Log.e("AktuBaar", "Download security error: ${e.message}")
                        } catch (e: Exception) {
                            snackbarHostState.showSnackbar("Download failed unexpectedly")
                            Log.e("AktuBaar", "Download unexpected error: ${e.message}")
                        }
                    }
                }
            ) {
                Icon(
                    imageVector = Icons.Default.Download,
                    contentDescription = "Download",
                    tint = MaterialTheme.colorScheme.primary
                )
            }
        }
    }
}

suspend fun downloadPdf(url: String, context: Context, snackbarHostState: SnackbarHostState) = withContext(Dispatchers.IO) {
    try {
        val client = OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .build()
        val request = Request.Builder().url(url).build()

        client.newCall(request).execute().use { response ->
            if (!response.isSuccessful) throw IOException("Failed to download: ${response.code}")
            val fileName = url.substringAfterLast("/").takeIf { it.isNotBlank() } ?: "document.pdf"
            val file = File(
                context.getExternalFilesDir(android.os.Environment.DIRECTORY_DOWNLOADS)
                    ?: File(context.cacheDir, "downloads"), fileName
            )

            response.body?.byteStream()?.use { input ->
                FileOutputStream(file).use { output ->
                    input.copyTo(output)
                }
            }
            // Notify user of successful download
            withContext(Dispatchers.Main) {
                snackbarHostState.showSnackbar("Downloaded: $fileName")
            }
        }
    } catch (e: IOException) {
        Log.e("AktuBaar", "Download IOException: ${e.message}")
        throw e
    } catch (e: Exception) {
        Log.e("AktuBaar", "Download unexpected error: ${e.message}")
        throw e
    }
}

fun viewPdf(context: Context, url: String, snackbarHostState: SnackbarHostState) {
    try {
        val uri = if (url.startsWith("http")) {
            Uri.parse(url)
        } else {
            val file = File(url)
            FileProvider.getUriForFile(context, "${context.packageName}.fileprovider", file)
        }
        val intent = Intent(Intent.ACTION_VIEW).apply {
            setDataAndType(uri, "application/pdf")
            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
        }
        context.startActivity(intent)
    } catch (e: ActivityNotFoundException) {
        Log.e("AktuBaar", "No PDF viewer found: ${e.message}")
        throw e
    } catch (e: SecurityException) {
        Log.e("AktuBaar", "Security error opening PDF: ${e.message}")
        throw e
    } catch (e: Exception) {
        Log.e("AktuBaar", "PDF view error: ${e.message}")
        throw e
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FeedbackScreen(
    navController: NavController,
    viewModel: MainViewModel
) {
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "Feedback",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "We value your feedback!",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground
                )
                var feedback by remember { mutableStateOf("") }
                TextField(
                    value = feedback,
                    onValueChange = { feedback = it },
                    label = {
                        Text(
                            text = "Your Feedback",
                            color = MaterialTheme.colorScheme.onSurface
                        )
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(150.dp)
                        .background(
                            color = MaterialTheme.colorScheme.surface,
                            shape = RoundedCornerShape(12.dp)
                        ),
                    colors = TextFieldDefaults.colors(
                        focusedTextColor = MaterialTheme.colorScheme.onSurface,
                        unfocusedTextColor = MaterialTheme.colorScheme.onSurface,
                        cursorColor = MaterialTheme.colorScheme.primary,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent
                    ),
                    maxLines = 5
                )
                Button(
                    onClick = {
                        scope.launch {
                            if (feedback.isNotBlank()) {
                                snackbarHostState.showSnackbar("Thank you for your feedback!")
                                navController.navigateUp()
                            } else {
                                snackbarHostState.showSnackbar("Please enter feedback")
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary,
                        contentColor = MaterialTheme.colorScheme.onPrimary
                    )
                ) {
                    Text(
                        text = "Submit",
                        fontSize = 16.sp
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ReportIssueScreen(
    navController: NavController,
    viewModel: MainViewModel
) {
    val context = LocalContext.current
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            text = "Report an Issue",
                            color = MaterialTheme.colorScheme.onPrimary
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primary
                    )
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
                    .padding(horizontal = 16.dp, vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Report an Issue",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold,
                    color = MaterialTheme.colorScheme.onBackground
                )
                var issue by remember { mutableStateOf("") }
                TextField(
                    value = issue,
                    onValueChange = { issue = it },
                    label = {
                        Text(
                            text = "Describe the Issue",
                            color = MaterialTheme.colorScheme.onSurface
                        )
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(150.dp)
                        .background(
                            color = MaterialTheme.colorScheme.surface,
                            shape = RoundedCornerShape(12.dp)
                        ),
                    colors = TextFieldDefaults.colors(
                        focusedTextColor = MaterialTheme.colorScheme.onSurface,
                        unfocusedTextColor = MaterialTheme.colorScheme.onSurface,
                        cursorColor = MaterialTheme.colorScheme.primary,
                        focusedIndicatorColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent
                    ),
                    maxLines = 5
                )
                Button(
                    onClick = {
                        scope.launch {
                            if (issue.isNotBlank()) {
                                try {
                                    val emailIntent = Intent(Intent.ACTION_SENDTO).apply {
                                        data = Uri.parse("mailto:support@aktubaar.com")
                                        putExtra(Intent.EXTRA_SUBJECT, "Issue Report - AktuBaar")
                                        putExtra(Intent.EXTRA_TEXT, issue)
                                    }
                                    context.startActivity(Intent.createChooser(emailIntent, "Send email..."))
                                    navController.navigateUp()
                                } catch (e: ActivityNotFoundException) {
                                    snackbarHostState.showSnackbar("No email app found")
                                    Log.e("AktuBaar", "Email error: ${e.message}")
                                } catch (e: Exception) {
                                    snackbarHostState.showSnackbar("Error sending report")
                                    Log.e("AktuBaar", "Report issue error: ${e.message}")
                                }
                            } else {
                                snackbarHostState.showSnackbar("Please describe the issue")
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.primary,
                        contentColor = MaterialTheme.colorScheme.onPrimary
                    )
                ) {
                    Text(
                        text = "Submit",
                        fontSize = 16.sp
                    )
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SyllabusScreen(
    navController: NavController,
    viewModel: MainViewModel
) {
    val context = LocalContext.current
    val isDarkMode by viewModel.isDarkMode.collectAsStateWithLifecycle()
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()

    // State for WebView, loading, and error
    var webView by remember { mutableStateOf<WebView?>(null) }
    var isLoading by remember { mutableStateOf(true) }
    var hasError by remember { mutableStateOf(false) }

    AktuBaarTheme(darkTheme = isDarkMode) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("Syllabus", color = MaterialTheme.colorScheme.onPrimary) },
                    navigationIcon = {
                        IconButton(onClick = { navController.navigateUp() }) {
                            Icon(
                                imageVector = Icons.Default.ArrowBack,
                                contentDescription = "Back",
                                tint = MaterialTheme.colorScheme.onPrimary
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(containerColor = MaterialTheme.colorScheme.primary)
                )
            },
            snackbarHost = { SnackbarHost(hostState = snackbarHostState) }
        ) { paddingValues ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.background)
                    .padding(paddingValues)
            ) {
                AndroidView(
                    factory = { ctx ->
                        WebView(ctx).apply {
                            setLayerType(View.LAYER_TYPE_HARDWARE, null)
                            settings.apply {
                                javaScriptEnabled = true
                                domStorageEnabled = true
                                loadWithOverviewMode = true
                                useWideViewPort = true
                                cacheMode = WebSettings.LOAD_CACHE_ELSE_NETWORK
                                setSupportZoom(true)
                                builtInZoomControls = true
                                displayZoomControls = false
                                databaseEnabled = true
                                allowFileAccess = false
                                allowContentAccess = false
                            }
                            webViewClient = object : WebViewClient() {
                                override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
                                    isLoading = true
                                    hasError = false
                                    Log.d("AktuBaar", "Page started loading: $url")
                                }

                                override fun onPageFinished(view: WebView?, url: String?) {
                                    isLoading = false
                                    Log.d("AktuBaar", "Page loaded: $url")
                                }

                                override fun onReceivedError(
                                    view: WebView?,
                                    request: WebResourceRequest?,
                                    error: WebResourceError?
                                ) {
                                    isLoading = false
                                    hasError = true
                                    scope.launch {
                                        snackbarHostState.showSnackbar("Error loading syllabus: ${error?.description}")
                                    }
                                    Log.e("AktuBaar", "WebView error: ${error?.description}, code: ${error?.errorCode}")
                                }

                                override fun shouldOverrideUrlLoading(
                                    view: WebView?,
                                    request: WebResourceRequest?
                                ): Boolean {
                                    val url = request?.url.toString()
                                    Log.d("AktuBaar", "Clicked URL: $url")
                                    if (url.endsWith(".pdf", ignoreCase = true)) {
                                        scope.launch {
                                            try {
                                                openUrlInExternalApp(context, url, scope, snackbarHostState)
                                            } catch (e: Exception) {
                                                snackbarHostState.showSnackbar("Failed to open PDF: ${e.message}")
                                            }
                                        }
                                        return true
                                    }
                                    if (url.startsWith("https://aktu.ac.in")) {
                                        view?.loadUrl(url)
                                        return false
                                    }
                                    scope.launch {
                                        openUrlInExternalApp(context, url, scope, snackbarHostState)
                                    }
                                    return true
                                }
                            }
                            webChromeClient = object : WebChromeClient() {
                                override fun onProgressChanged(view: WebView?, newProgress: Int) {
                                    if (newProgress == 100) isLoading = false
                                }
                            }
                            loadUrl("https://aktu.ac.in/syllabus%202024-2025.html")
                            webView = this
                        }
                    },
                    update = { wv ->
                        webView = wv
                        if (hasError) wv.reload()
                    },
                    modifier = Modifier.fillMaxSize()
                )

                // Modern loading indicator with central alignment
                if (isLoading && !hasError) {
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(MaterialTheme.colorScheme.background.copy(alpha = 0.8f))
                    ) {
                        Column(
                            modifier = Modifier
                                .align(Alignment.Center)
                                .wrapContentSize(),
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.spacedBy(16.dp)
                        ) {
                            CircularProgressIndicator(
                                color = MaterialTheme.colorScheme.primary,
                                strokeWidth = 6.dp,
                                modifier = Modifier
                                    .size(60.dp)
                                    .alpha(
                                        animateFloatAsState(
                                            targetValue = 1f,
                                            animationSpec = tween(durationMillis = 500)
                                        ).value
                                    )
                            )
                            Text(
                                text = "Loading Syllabus...",
                                fontSize = 20.sp,
                                fontWeight = FontWeight.SemiBold,
                                color = MaterialTheme.colorScheme.onBackground
                            )
                        }
                    }
                }

                // Error state with modern retry button
                if (hasError) {
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(MaterialTheme.colorScheme.background)
                            .padding(24.dp),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            imageVector = Icons.Default.Error,
                            contentDescription = "Error",
                            tint = MaterialTheme.colorScheme.error,
                            modifier = Modifier.size(48.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            text = "Failed to load the syllabus.",
                            color = MaterialTheme.colorScheme.onBackground,
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Medium,
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(24.dp))
                        Button(
                            onClick = {
                                hasError = false
                                isLoading = true
                                webView?.reload()
                            },
                            colors = ButtonDefaults.buttonColors(
                                containerColor = MaterialTheme.colorScheme.primary,
                                contentColor = MaterialTheme.colorScheme.onPrimary
                            ),
                            shape = RoundedCornerShape(12.dp),
                            elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)
                        ) {
                            Text(
                                text = "Retry",
                                fontSize = 16.sp,
                                fontWeight = FontWeight.Medium
                            )
                        }
                    }
                }
            }

            BackHandler(enabled = true) {
                if (webView?.canGoBack() == true) webView?.goBack() else navController.navigateUp()
            }
        }

        if (!isNetworkAvailable(context)) {
            LaunchedEffect(Unit) {
                scope.launch { snackbarHostState.showSnackbar("No internet connection. Please check your network.") }
            }
        }
    }
}

// Helper function to open URLs in an external app
private fun openUrlInExternalApp(context: Context, url: String, scope: CoroutineScope, snackbarHostState: SnackbarHostState) {
    try {
        if (url.isBlank() || !url.startsWith("http")) {
            throw IllegalArgumentException("Invalid URL: $url")
        }
        val intent = Intent(Intent.ACTION_VIEW).apply {
            data = Uri.parse(url)
            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            if (url.endsWith(".pdf", ignoreCase = true)) {
                setDataAndType(Uri.parse(url), "application/pdf")
            }
        }
        context.startActivity(intent)
    } catch (e: ActivityNotFoundException) {
        scope.launch {
            val message = if (url.endsWith(".pdf")) "No PDF viewer installed" else "No app available to open link"
            snackbarHostState.showSnackbar(message)
        }
        Log.e("AktuBaar", "No handler for URL: ${e.message}")
    } catch (e: IllegalArgumentException) {
        scope.launch { snackbarHostState.showSnackbar("Invalid URL: ${e.message}") }
        Log.e("AktuBaar", "URL error: ${e.message}")
    } catch (e: Exception) {
        scope.launch { snackbarHostState.showSnackbar("Error opening link: ${e.message}") }
        Log.e("AktuBaar", "Unexpected error: ${e.message}")
    }
}

// Network availability check
fun isNetworkAvailable(context: Context): Boolean {
    val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
    val network = connectivityManager.activeNetwork ?: return false
    val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false
    return capabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)
}